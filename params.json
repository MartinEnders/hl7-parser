{
  "name": "Hl7-parser",
  "tagline": "Common Lisp HL7 Parser (encoder / decoder)",
  "body": "# Common Lisp HL7-Parser\r\n\r\nHL7-Parser for HL7 Version 2 Messages (decode / encode) for Common Lisp.\r\n\r\n> The HL7 Version 2 Messaging Standard — Application Protocol for Electronic\r\n> Data Exchange in Healthcare Environments — is considered to be the workhorse\r\n> of data exchange in healthcare and is the most widely implemented standard\r\n> for healthcare information in the world.\r\n\r\nSource: http://www.hl7.org/about/FAQs/index.cfm?ref=nav (\"General HL7 FAQ\" > \"Version 2\" > \"What is Version 2?\")\r\n\r\n## License\r\nhttp://opensource.org/licenses/BSD-3-Clause\r\n\r\n## Implementation\r\nSBCL and CCL on Debian GNU/Linux\r\n\r\n## Installation\r\n\r\nHL7-Parser is 'quickloadable':\r\n\r\n```cl\r\n(ql:quickload \"hl7-parser\")\r\n```\r\n\r\n## Usage\r\n```cl\r\n(defun decode (string-or-stream)\r\n```\r\n\r\nhl7-parser:decode\r\n\r\n * decode: Accepts a String or a Stream containing HL7-Messages\r\n * returns a list of parsed messages.\r\n\r\n```cl\r\n(defun encode (message-list &key (delimiter \"|^~\\\\&\") (message-delimiter nil))\r\n```\r\nhl7-parser:encode\r\n * `message-list` List of decoded HL7-Messages\r\n * `delimiter` for encoding of Message\r\n * `message-delimiter` if true then the encoded Messages ends with a `#\\Newline` if nil then no `#\\Newline` is appended (default nil).\r\n * returns a list of encoded messages (Strings)\r\n\r\n\r\n\r\n```cl\r\n(defun test-parser (in-file out-file &key (external-format :iso-8859-1) (output-delimiters \"|^~\\\\&\"))\r\n```\r\nhl7-test:test-parser\r\n * Read `in-file` (with HL7-messages) decode every line and then encode it and write it to `out-file`.\r\n * Use `diff in-file out-file` to check if the encode and decode of the messages work.\r\n * returns always `NIL`\r\n\r\n## Exeptionhandling and validation\r\nEvery String or Stream with at least eight Characters is parsed in a more or less reasonable way.\r\n\r\nThere are no syntax or HL7-Structure checking mechanisms.\r\n\r\n## Escaping\r\n\r\nThe HL7-Escaping works like in the most programming languages but in this case this is the wrong way.\r\n\r\nThe following escape sequences are defined in the HL7 2.5 Standard in Chapter 2.7.1:\r\n```\r\n\\H\\        start highlighting\r\n\\N\\        normal text (end highlighting)\r\n\\F\\        field separator\r\n\\S\\        component separator\r\n\\T\\        subcomponent separator\r\n\\R\\        repetition separator\r\n\\E\\        escape character\r\n\\Xdddd...\\ hexadecimal data\r\n\\Zdddd...\\ locally defined escape sequence\r\n```\r\n\r\nThese escape sequences are not recognized correctly by the parser:\r\n```cl\r\nCL-USER> (hl7-parser:decode (format nil \"MSH|^~~\\\\&|test|te\\\\F\\\\st^test|~cEVN||123~c~c\" #\\Return #\\Return #\\Newline ))\r\n;; Evaluates to:\r\n((:MESSAGE\r\n  (:SEGMENT (:FIELD \"MSH\" \"|^~\\\\&\" \"test\" (:COMPONENT \"te\\\\F\\\\st\" \"test\") \"\")\r\n   (:FIELD \"EVN\" \"\" \"123\"))))\r\n;; Should evaluate to:\r\n((:MESSAGE\r\n  (:SEGMENT (:FIELD \"MSH\" \"|^~\\\\&\" \"test\" (:COMPONENT \"te|st\" \"test\") \"\")\r\n   (:FIELD \"EVN\" \"\" \"123\"))))\r\n```\r\nThe double-backslashes are needed because they are used within a string.\r\n\r\nIssue: https://github.com/MartinEnders/hl7-parser/issues/1\r\n\r\n## Example\r\n```cl\r\nCL-USER> (hl7-parser:decode (format nil \"MSH|^~~\\\\&|test|test^test|~cEVN||123~c~c\" #\\Return #\\Return #\\Newline ))\r\n((:MESSAGE\r\n  (:SEGMENT (:FIELD \"MSH\" \"|^~\\\\&\" \"test\" (:COMPONENT \"test\" \"test\") \"\")\r\n   (:FIELD \"EVN\" \"\" \"123\") \"\")))\r\n\r\nCL-USER> (hl7-parser:encode (hl7-parser:decode (format nil \"MSH|^~~\\\\&|test|test^test|~cEVN||123~c~c\" #\\Return #\\Return #\\Newline )))\r\n(\"MSH|^~\\\\&|test|test^test|^MEVN||123^M\") ; ^M -> #\\Return\r\n\r\nCL-USER> (hl7-parser:encode (hl7-parser:decode (format nil \"MSH|^~~\\\\&|test|test^test|~cEVN||123~c~c\" #\\Return #\\Return #\\Newline )) :message-delimiter t)\r\n(\"MSH|^~\\\\&|test|test^test|^MEVN||123^M\r\n\") ; ^M -> #\\Return\r\n```\r\n\r\nHow to set Delimiters for encoding:\r\n```cl\r\nCL-USER> (hl7-parser:decode (format nil \"MSH#^~~\\\\&#test#test^test#~c\" #\\Newline ))\r\n((:MESSAGE (:FIELD \"MSH\" \"#^~\\\\&\" \"test\" (:COMPONENT \"test\" \"test\") \"\")))\r\n\r\nCL-USER> (hl7-parser:encode (hl7-parser:decode (format nil \"MSH|^~~\\\\&|test|test^test|~c\" #\\Newline )) :delimiter \"#^~\\\\&\")\r\n(\"MSH#^~\\\\&#test#test^test#\")\r\n```\r\n\r\nPay attention to the character escaping (~ in format directive and backslashes)",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}